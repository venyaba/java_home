import java.util.Scanner;

public class Main {
    static  int age ; // Декларация глобальной переменной
    static Scanner sc = new Scanner(System.in);
    public static void main(String[] args) {

        printNumbersWithFor(); // вызов метода с циклом for
        printNumbersWithWhile(); // вызов метода с циклом while
        printNumbersWithDoWhile(); // вызов метода с циклом do while
       System.out.println(isEqual(2,2)); // вызов метода сравнивания двух чисел
       printAge(); // вызов процедуры

        Cat cat1 = new Cat("Barsik", 10,6);// создаем экземпляр класса Cat

        cat1.out(); // вызов метода класса Cat, который выводит в консоль значения полей класса Cat.
        System.out.println(cat1.getName()); // вызов геттера, возвращает значение поля name класса Cat.
        System.out.println(cat1.getAge()); // вызов геттера, возвращает значение поля age класса Cat.
        System.out.println(cat1.getWeight()); // вызов геттера, возвращает значение поля weight класса Cat.
        cat1.setAge(5); // вызов сеттера, устанавливаем новое значение поля age класса Cat
        cat1.setWeight(4); // вызов сеттера, устанавливаем новое значение поля weight класса Cat
        cat1.setName("Murka"); // вызов сеттера, устанавливаем новое значение поля name класса Cat
        cat1.out(); // вызов метода класса Cat, c новыми параметрами.
    }

    /**
     * Цикл for — еще один вид циклов. Он также используется для многократного
     * запуска блока кода при определенном условии, но по сравнению с циклом while
     * имеет больше возможностей. В условия управления циклом можно добавить временную
     * переменную, определить условие управления и изменить значение временной переменной.
     * Таким образом все управляющие циклом факторы связываются, что снижает вероятность
     * что-то упустить или допустить ошибку. Это позволит сохранить код чистым и понятным.
     * Цикл for больше подходит для написания кода в более строгом стиле.
     */
    public  static void printNumbersWithFor(){
        for(int i = 1;i <= 10; i++){
            System.out.println(i);
        }
    }

    /**
     * С его помощью можно создать безусловный цикл, например while(true) — бесконечный цикл.
     * Цикл while обычно используется в случаях, когда:
     * число итераций не известно заранее;
     * счётчик итераций не требуется по логике программы.
     */
    public  static void printNumbersWithWhile(){
        int i = 1;
        while (i <= 10){
            System.out.println(i);
            i++;
        }
    }

    /**
     * Кроме цикла с предусловием while существует вариант,
     * который выполняет хотя бы одну итерацию, а после этого проверяет условие.
     * Это цикл do…while, который называется циклом с постусловием.Сначала отрабатывает
     * действие в <теле цикла>, а потом проверяется <условие выполнения цикла>.
     * Если оно возвращает true, то цикл выполнит действие повторно.
     */
    public  static void printNumbersWithDoWhile(){
        int i = 1;
        do {
            System.out.println(i);
            i++;
        }while (i <=10);
    }

    /**
     * @param a первая переменная
     * @param b вторая переменная
     * @return результат сравнения
     */
    public static boolean isEqual(int a, int b){
        return a == b;
    }

    /**
     * процедура считывает введенное значение в консоли и записывает в глобадьную переменную age
     */
    public static  void printAge(){
     System.out.println("Введите ваш возраст:");
     age = sc.nextInt();
    }

}
